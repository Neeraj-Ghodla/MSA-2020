# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '9220b458-0c19-4238-9f6e-a35a0860cbbe'
  
  # Web app name
  webAppNameBackend: 'msa-2020-moviedb-backend'
  webAppNameFrontend: 'msa-2020-moviedb-frontend'
  
  # Environment name
  environmentNameBackend: 'msa-2020-moviedb-backend'
  environmentNameFrontend: 'msa-2020-moviedb-frontend'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
# - stage: Build_Backend
#   displayName: Build stage backend
#   jobs:  
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
      
#     steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '10.x'
#       displayName: 'Install Node.js'

#     - script: |
#         cd backend
#         npm install
#         npm run build --if-present
#         npm run test --if-present
#         cd ..
#       displayName: 'npm install, build and test'
  
- stage: Build_Frontend
  displayName: Build stage frontend
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
      
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        cd frontend
        npm install
        npm run build --if-present
        cd ..
      displayName: 'npm install, build and test'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/frontend'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: frontend

# Backend
# - stage: Deploy_Backend
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: $(environmentNameBackend)
#     pool: 
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:            
#           - task: AzureWebApp@1
#             displayName: 'Azure Web App Deploy: msa-2020-moviedb-backend'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               appName: $(webAppNameBackend)
#               runtimeStack: 'NODE|10.10'
#               package: $(Pipeline.Workspace)/backend/$(Build.BuildId).zip
#               startUpCommand: 'npm run start'

# Frontend
- stage: Deploy_Frontend
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentNameFrontend)
    pool: 
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:            
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: msa-2020-moviedb-frontend'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppNameFrontend)
              runtimeStack: 'NODE|10.10'
              package: $(Pipeline.Workspace)/frontend/$(Build.BuildId).zip
              startUpCommand: 'npm run start'